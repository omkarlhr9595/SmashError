// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

generator client {
  provider = "prisma-client-js"
}

//npx prisma migrate dev --name init
//npx prisma db push
//npx prisma generate

model User {
  sub       String     @id @unique
  nickname  String
  name      String
  email     String     @unique
  picture   String
  rollNo    Int?
  className String?
  points    Int
  role      Role
  room      Room[]
  createdAt DateTime   @default(now())
  question  Question[] @relation("QuestionsFromUser")
  answer    Answer[]   @relation("AnswersToQuestion")
  comment Comment[]
}

model Question {
  id        String    @id @default(uuid())
  title     String
  content   String
  userSub   String
  user      User      @relation("QuestionsFromUser", fields: [userSub], references: [sub])
  answer    Answer[]
  comment   Comment[]
  aiAnswer  String
  upvote    String[]  @default([])
  downvote  String[]  @default([])
  views     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      String[]
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  questionId String //duplicate
  question   Question  @relation(fields: [questionId], references: [id])
  userSub    String
  user       User      @relation("AnswersToQuestion", fields: [userSub], references: [sub])
  comment    Comment[]
  upvote     String[]  @default([])
  downvote   String[]  @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  answerId   String
  answer     Answer   @relation(fields: [answerId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  userSub    String
  User       User     @relation(fields: [userSub], references: [sub])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Mentor {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  organization String
  Room         Room[]
  role         Role     @default(Mentor)
  experience   Int
  expertise    String[]
  linkedIn     String
  profilePic   String
  createdAt    DateTime @default(now())
}

model Room {
  id        String   @id @default(uuid())
  name      String
  mentorId  Int
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  members   User[] //no need of this
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  Member
  Core
  Mentor
}
