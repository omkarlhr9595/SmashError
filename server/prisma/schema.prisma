// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

generator client {
  provider = "prisma-client-js"
}

//npx prisma migrate dev --name init
//npx prisma generate

model User {
  id        Int        @id @default(autoincrement())
  sub       String     @unique
  nickname  String
  name      String
  email     String     @unique
  picture   String
  rollNo    Int?
  className String?
  points    Int
  role      Role
  room      Room[]
  createdAt DateTime   @default(now())
  Question  Question[] @relation("QuestionsFromUser")
  Answer    Answer[]   @relation("AnswersToQuestion")
  Comment   Comment[]
}

model Question {
  id        String    @id @default(uuid())
  title     String
  content   String
  userId    Int
  User      User      @relation("QuestionsFromUser", fields: [userId], references: [id])
  Answer    Answer[]
  comment   Comment[]
  aiAnswer  String
  upvote    Int
  downvote  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  questionId String //duplicate
  Question   Question  @relation(fields: [questionId], references: [id])
  userId     Int
  User       User      @relation("AnswersToQuestion", fields: [userId], references: [id])
  Comment    Comment[]
  upvote     Int
  downvote   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  answerId   String
  Answer     Answer   @relation(fields: [answerId], references: [id])
  QuestionId String
  Question   Question @relation(fields: [QuestionId], references: [id])
  userId     Int
  User       User     @relation(fields: [userId], references: [id])
  like       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Mentor {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  organization String
  Room         Room[]
  role         Role     @default(Mentor)
  experience   Int
  expertise    String[]
  linkedIn     String
  profilePic   String
  createdAt    DateTime @default(now())
}

model Room {
  id        String   @id @default(uuid())
  name      String
  mentorId  Int
  Mentor    Mentor   @relation(fields: [mentorId], references: [id])
  members   User[] //no need of this
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  Member
  Core
  Mentor
}
